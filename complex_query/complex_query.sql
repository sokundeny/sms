-- Query 1: List all software along with their developer name and category name

SELECT 
    s.software_id,
    s.name AS software_name,
    d.name AS developer_name,
    c.name AS category_name
FROM 
    Software s
JOIN 
    Developer d ON s.developer_id = d.developer_id
JOIN 
    Categories c ON s.category_id = c.category_id;

-- ✅ Indexes to optimize Query 1 (JOINs on Developer and Categories)
CREATE INDEX idx_software_developer_id ON Software(developer_id);
CREATE INDEX idx_software_category_id ON Software(category_id);


-- Query 2: Find the top 3 highest-rated software based on average rating
SELECT 
    s.name AS software_name,
    AVG(r.rating) AS avg_rating
FROM 
    Software s
JOIN 
    Reviews r ON s.software_id = r.software_id
GROUP BY 
    s.software_id
ORDER BY 
    avg_rating DESC
LIMIT 3;

-- ✅ Indexes to optimize Query 2 (JOIN on Reviews, GROUP BY, and ORDER BY AVG)
create INDEX idx_reviews_software_id ON Reviews(software_id);

-- Query 3: Retrieve all transactions made by a specific customer (by email)
SELECT 
    t.transaction_id,
    t.date,
    t.amount,
    s.name AS software_name
FROM 
    Transactions t
JOIN 
    Customers c ON t.customer_id = c.customer_id
JOIN 
    Software s ON t.software_id = s.software_id
WHERE 
    c.email = 'customer@example.com';
    
 -- ✅ Index to optimize Query 3 (WHERE by customer email, JOINs)   
CREATE INDEX idx_customers_email ON Customers(email);
create INDEX idx_transactions_customer_id ON Transactions(customer_id);
ALTER TABLE Transactions DROP INDEX idx_transactions_customer_id;

CREATE INDEX idx_transactions_software_id ON Transactions(software_id);


-- Query 4: Find software that has never been reviewed
SELECT 
    s.name
FROM 
    Software s
LEFT JOIN 
    Reviews r ON s.software_id = r.software_id
WHERE 
    r.review_id IS NULL;
    
-- ✅ Index to optimize Query 4 (LEFT JOIN check for NULL)
-- Already covered by: idx_reviews_software_id

-- Query 5: Total revenue generated by each software
SELECT 
    s.name AS software_name,
    SUM(t.amount) AS total_revenue
FROM 
    Software s
JOIN 
    Transactions t ON s.software_id = t.software_id
GROUP BY 
    s.software_id;
    
-- ✅ Index to optimize Query 5 (JOIN and GROUP BY)
-- Already covered by: idx_transactions_software_id

-- Query 6: List customers who have spent more than $100 in total
SELECT 
    c.name,
    c.email,
    SUM(t.amount) AS total_spent
FROM 
    Customers c
JOIN 
    Transactions t ON c.customer_id = t.customer_id
GROUP BY 
    c.customer_id
HAVING 
    total_spent > 100;
    
-- ✅ Index to optimize Query 6 (JOIN and GROUP BY with SUM)
-- Already covered by: idx_transactions_customer_id

-- Query 7: Find the most recent review for each software
SELECT 
    r.software_id,
    s.name AS software_name,
    r.comment,
    r.rating,
    r.review_date
FROM 
    Reviews r
JOIN 
    Software s ON r.software_id = s.software_id
JOIN (
    SELECT 
        software_id,
        MAX(review_date) AS latest_review_date
    FROM 
        Reviews
    GROUP BY 
        software_id
) latest ON r.software_id = latest.software_id 
        AND r.review_date = latest.latest_review_date
LIMIT 300;

    
-- ✅ Index to optimize Query 7 (Subquery using MAX(review_date) per software)
CREATE INDEX idx_reviews_software_review_date ON Reviews(software_id, review_date DESC);

-- Query 8: Find developers who have created more than 2 software products
SELECT 
    d.name AS developer_name,
    COUNT(s.software_id) AS total_products
FROM 
    Developer d
JOIN 
    Software s ON d.developer_id = s.developer_id
GROUP BY 
    d.developer_id
HAVING 
    total_products > 2;
    
-- ✅ Index to optimize Query 8 (COUNT and GROUP BY on Software table)
-- Already covered by: idx_software_developer_id

-- Query 9: Get average rating per category
SELECT 
    c.name AS category_name,
    AVG(r.rating) AS average_rating
FROM 
    Categories c
JOIN 
    Software s ON c.category_id = s.category_id
JOIN 
    Reviews r ON s.software_id = r.software_id
GROUP BY 
    c.category_id;

-- ✅ Index to optimize Query 9 (JOIN across 3 tables, GROUP BY)
-- Already covered by: idx_software_category_id, idx_reviews_software_id

-- Query 10: List all customers and the software they've reviewed (include customers who haven’t reviewed anything)
SELECT 
    c.name AS customer_name,
    s.name AS software_reviewed
FROM 
    Customers c
LEFT JOIN 
    Reviews r ON c.customer_id = r.customer_id
LEFT JOIN 
    Software s ON r.software_id = s.software_id;


-- ✅ Index to optimize Query 10 (LEFT JOINs on customer_id and software_id)
CREATE INDEX idx_reviews_customer_id ON Reviews(customer_id);
-- software_id index is already created above